#!/usr/bin/env Rscript
# | Program to generate input files for pest to calibrate a
# | basement-model

# Process command line options and arguments
require('yaml', quietly = TRUE)
require('pest', quietly = TRUE)

opt <- 
  genBsmntBcPestInput.cli(
    commandArgs(TRUE), 
    system.file("config-templates", "genBsmntPestInput-conf.yaml"
               , package = "pest")
    )

cnf <- yaml.load_file(opt$config)

# Read and generate observation data
#===================================

obs.marks.summary <- 
     if (!is.null(cnf$mf))     summarizeObs(cnf$mf, "mark") else NULL 
obs.hydg.summary <-  
     if (!is.null(cnf$hnms))   summarizeObs(cnf$hnms, "hydrograph") else NULL 

obs.summary <-     # summary of observations
    rbind(obs.marks.summary, obs.hydg.summary)

obs.df.list <-     # list with observations
    genPstObsDf(obs.summary)

obs.df <-          # observations with names, values and type
    Reduce(rbind, obs.df.list, data.frame())

# Generate instruction file
#===========================

# Produce strings
#-----------------
ins.string <-         # instruction strings per given file
    lapply(obs.df.list, function(x) 
           genInsString(names = as.character(x$names), type  = levels(x$type)) )

# Write ins-files
#-----------------
exts <-            # exit-status-dummy; nothing useful returned
    lapply(names(ins.string), 
       function(x) {
           ofile <- as.character(obs.summary$files[obs.summary$ids == x])
           cat(paste(ins.string[[x]], "\n", sep = ""),
               file = paste(sub("\\..*", "",basename(ofile)), 
                            "-resid.ins", sep = ""))
       }
    )

# Generate pest-file
#====================
# Process Parameters
#--------------------

pars.list <- list()     # parameter name-initial-value
pars.list$names <- getTplArgs(cnf$ptpl, cnf$pesc)
pars.list$values <- 
{ 
    if ( length(cnf$pini) == 1 ) {  
        rep(cnf$pini, length(pars.list$names))
    } else if ( length(cnf$pini) != length(pars.list$names) ) {  
        warning("initial parameter-values",
                " and given parameters differ in length; \n",
                " taking just first one: ", cnf$pini[1]) 
        cnf$pini[1]
        rep(cnf$pini, length(pars.list$names))
    } else {
    cnf$pini
    }
}
pars.lines <-     # strings of "parameter-data" in pest-template
    genParString(cbind(as.data.frame(pars.list), cnf$pbound[1], cnf$pbound[2]))

# Process observations
#----------------------

obs.lines <-      # strings of "observation-data" in pest-template
    genObsString(as.data.frame(obs.df))

# Model input-output 
#---------------------
mio.lines <-       # model-input-output lines
    c(paste(cnf$ptpl, cnf$pmi)
      ,as.character(sapply(c(unlist(cnf$m),unlist(cnf$hnms)), 
              function(x){
                  x <-  # model output-files without suffix
                      sub("\\.[a-zA-Z]+$", "-resid", basename(x))
                  paste(x, c(".ins", ".dat"), sep = "", collapse = " ")
              }
       ))
    )


# Replace parameters in pest-template file
#------------------------------------------
pst.string <- 
    replaceParsInPstTmpl(pars.lines, obs.lines, mio.lines 
                       , 1, length(cnf$hnms) + length(cnf$mf), 'sh run') 
cat(pst.string, file = paste(cnf$case, ".pst", sep = ""))

# Generate a run-shell-file 
system(paste("sed '/CASE/s/__case__/", cnf$case, "/' <",
             system.file("config-templates"
                    , paste('run-ppest', cnf$type, sep = "-")
                    , package = "pest")
          , '> run', sep = "")
)
system('chmod +x run')
message("
# Programs generated the follwing files
#     * pest-control-file (.pst)
#     * pest-instruction-files (.ins) for each given marks and hydrograph-file
#     * run shell script
"
q(status = 0)

# End of File ===================================================================
# vim: set ft=r:


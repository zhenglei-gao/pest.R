#!/usr/bin/env Rscript
#================================================================================
# File:        genSitraPestInput    
# Description: Generate input-files for `pest`-parameter-estimation
# Argument:    sitra-`.bsi`-file
# Author:      Michel Kuhlmann (kum), <kum@tkconsult.ch>
# Institution: TK Consult AG
# Copyright:   GNU General Public Licence 
#================================================================================
args <- commandArgs(TRUE)
bsi.file <- 
    switch(as.character(length(args))
         , "0" = 'sitra.bsi'
         , "1" = args[1]
         , stop('Please give sitra-`.bsi`-file as argument! \n', 
                ' Usage: \n genSitraPestInput [<file.bsi>]'))

if ( !file.exists(bsi.file) ) 
  stop("Couldn't find the given .bsi-file: ", args[1], "!\n",
       "Usage: \n genSitraPestInput [<file.bsi>]")

require('pest', quietly = TRUE)
require('whisker', quietly = TRUE)

bsi.conf <- getBsiContents(bsi.file)

cnf <- read.table(bsi.conf$biv, stringsAsFactor = FALSE)


## Get observations
obs.df.all <- readSitraObs(cnf[2,1])
obs.df <-         # exclude observation not lying in simulation domain
  obs.df.all[obs.df.all$Date > 0 & obs.df.all$Date < bsi.conf$run_time, ]
obs.df <- cbind(Id = genObsNames(obs.df[,1],obs.df[,2]), obs.df)
obs.list.all <- with(obs.df, split(obs.df, Name))
obs.list <- obs.list.all[!as.logical(sapply(obs.list.all, nrow) == 0)]

## Generate pest-instruction-files
exit_st <-         # not used any further
lapply(obs.list, function(x) 
{
    cat(genSitraInsString(x[,1]) 
      , file = paste(x[1,2], 'ins', sep = ".")
    ) 
    invisible()
}
)

## Transform parameter-file into a tpl-file
pars.file <- cnf[3,1]
pars.df.all <- readSitraPars(pars.file)

ppi <-         # indices of parameters to estimate
    which(pars.df.all$fixed == 0)
pars.df <- pars.df.all[ppi,]
writeSitraTpl(pars.df.all, i = ppi,  file = sub('csv$', 'tpl', pars.file))

## Generate pest-control-file

## Process Parameters

pars.list <- list(names = pars.df$name, values = pars.df$init)

pars.lines <-     # strings of "parameter-data" in pest-template
    genParString(as.data.frame(pars.list), bounds = c(1e-20, 1) )

# Process observations
#----------------------
obs.lines <-      # strings of "observation-data" in pest-template
    genSitraObsString(
       as.data.frame(
         list(
            names = obs.df[,1] 
           ,wses = obs.df[,4]
           ,weight = 1/obs.df[,5]
           ,type = tolower(obs.df[,6]))
           ,stringsAsFactors = FALSE
         )
    )

## Model input-output 
fmt_string <- "%-15s %-15s"
mio.lines <-       # model-input-output lines
    c(sprintf(fmt_string, sub("csv$", "tpl", pars.file),  pars.file)
      ,sapply(names(obs.list),
              function(x)
              sprintf(fmt_string
                    , paste(x, ".ins", sep = "")
                    , paste(x, ".csv", sep = "")) 
       )
    )


# Replace parameters in pest-template file
#------------------------------------------
pst.string <- 
    replaceParsInPstTmpl(
      pars.lines
    , obs.lines
    , mio.lines 
    , 1
    , length(obs.list)
    , 'Sitra.exe -return'
    , tolower(levels(obs.df$Type))
) 

cat(pst.string, file = sub("biv$", "pst", bsi.conf$biv))

q(status = 0)
